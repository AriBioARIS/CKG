attributes:
    name: project information
    description: 'Gets all the attributes of a given Project. Requires: Project.id'
    involved_nodes:
        - Project
    involved_rels: 
    query_type: pre
    query: >
        MATCH (project:Project)
        WITH project, size((project)-[]->()) AS number_subjects
        WHERE project.id="PROJECTID"
        RETURN project.id AS identifier, project.name AS name, project.acronym AS acronym,
        project.type AS data_types, project.responsible AS responsible, project.description AS description, number_subjects, project.status AS status;
extract_projectID:
    name: project identifier
    description: 'Returns project external identifier. Requires internal identifier.'
    involved_nodes:
        - Project
    involved_rels: 
    query_type: post
    query: >
        MATCH (p:Project)
        WHERE p.internal_id = "INTERNALID"
        RETURN p.id;
similarity:
    name: pearson_similarity
    description: The Pearson Similarity function computes the similarity of two given projects based on the proteins identified.
    involved_nodes:
        - Project
        - Protein
    involved_rels:
        - HAS_QUANTIFIED_PROTEIN
    query_type: pre
    query: >
        MATCH (project1:Project{id:'PROJECTID'})-[]-(:Subject)-[]-(:Biological_sample)-[]-(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein) 
        WHERE toBoolean(r.is_razor)
        WITH project1, algo.similarity.asVector(protein, r.value) AS p1Vector
        MATCH (project2:Project)-[]-(:Subject)-[]-(:Biological_sample)-[]-(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein) WHERE toBoolean(r.is_razor) AND project1 <> project2
        WITH project1, project2, p1Vector, algo.similarity.asVector(protein, r.value) AS p2Vector
        RETURN project1.id AS current_id, project2.id AS other_id, project1.name AS current, project2.name AS other, project2.description AS description, project2.responsible AS responsible, algo.similarity.pearson(p1Vector, p2Vector, {vectorType: "maps"}) AS similarity_pearson ORDER BY similarity_pearson DESC
overlap:
    name: overlap_similarity
    description: Get overlap of entities between projects i.e. ENTITY = Biological_process, RELATIONSHIP = ASSOCIATED_WITH
    involved_nodes:
        - Project
    involved_rels:
    query_type: pre
    query: >
        MATCH (project:Project)-[]-(:Subject)-[]-(:Biological_sample)-[]-(a:Analytical_sample)-[r:HAS_QUANTIFIED_PROTEIN]->(protein:Protein) 
        WHERE toBoolean(r.is_razor)
        WITH {item:id(project), name:project.id, categories: collect(DISTINCT id(protein))} as projectData
        WITH collect(projectData) as data
        WITH data, [value in data WHERE value.name IN ["PROJECTID"] | value.item ] AS sourceIds, [value in data WHERE NOT value.name IN ["PROJECTID"] | value.item ] AS targetIds
        CALL algo.similarity.overlap.stream(data, {sourceIds:sourceIds, targetIds: targetIds})
        YIELD item1, item2, count1, count2, intersection, similarity
        RETURN algo.getNodeById(item1).name AS project1_name, algo.getNodeById(item2).name AS project2_name, 
        algo.getNodeById(item1).id AS from, algo.getNodeById(item2).id AS to, count1 AS project1_total, count2 AS project2_total, count1-intersection AS project1_unique, 
        count2-intersection AS project2_unique, intersection, similarity ORDER BY similarity DESC
projects_subgraph:
    name: connected projects
    description: returns a subgraph for a list of projects
    involved_nodes:
        - Project
        - Disease
        - Tissue
        - Clinical_variable
    involved_rels:
        - STUDIES_DISEASE
        - STUDIES_TISSUE
        - STUDIES_INTERVENTION
    query_type: post
    query: >
        MATCH path=(p:Project)-[:STUDIES_DISEASE|:STUDIES_TISSUE|:STUDIES_INTERVENTION]-() WHERE p.id IN [LIST_PROJECTS] RETURN path
map_node_name:
    name:
    description:
    involved_nodes:
        - Disease
        - Tissue
        - Clinical_variable
    involved_rels:
    query: >
        MATCH (n:NODE {name:$name})
        RETURN n.id;
test:
    query: >
        MATCH (n:Clinical_variable) WHERE n.name='Body weight' RETURN n.name,n.id

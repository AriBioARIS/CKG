increment_project_id:
    name:  create new external identifier 
    description: 'Returns a new Project identifier based on the existing projects in the database (sequential identifier)'
    involved_nodes:
        - Project
    involved_rels:
    query: >
        MATCH (p:Project) 
        WITH toInteger(SPLIT(max(p.id), 'P')[1])+1 AS new_external_id, SIZE(SPLIT(max(p.id), 'P')[1]) AS length, SIZE(toString(toInteger(SPLIT(max(p.id), 'P')[1])+1)) AS new_length 
        RETURN SUBSTRING('P', 0, 1) + SUBSTRING('00000000000', 0, length-new_length) + new_external_id AS Project_external_id;
create_project:
    name:  create project from file
    description: 'Creates new Project nodes and links them to User, Disease, Tissue and Clinical variable, directly from projectCreationApp (web app).'
    involved_nodes:
        - Project
        - User
        - Subject
        - Disease
        - Tissue
        - Clinical_variable
    involved_rels:
    query: >
        CREATE CONSTRAINT ON (p:Project) ASSERT p.id IS UNIQUE;
        CREATE CONSTRAINT ON (p:Project) ASSERT p.internal_id IS UNIQUE;
        CREATE CONSTRAINT ON (p:Project) ASSERT p.name IS UNIQUE;
        MERGE (p:Project {internal_id:$internal_id}) 
        ON CREATE SET p.id=$external_id,p.name=$name,p.acronym=$acronym,p.description=$description,p.subjects=$subjects,p.type=$datatypes,p.timepoints=$timepoints,p.disease=$disease,p.tissue=$tissue,p.intervention=$intervention,p.responsible=$responsible,p.participant=$participant,p.start_date=$start_date,p.end_date=$end_date,p.status=$status 
        WITH p, SPLIT(p.responsible, ",") AS responsibles, SPLIT(p.participant, ",") AS participants
        MATCH (p)
        UNWIND responsibles AS user_mentioned
        MATCH (mentioned:User {name:user_mentioned})
        UNWIND participants AS user_participating
        MATCH (participant:User {name:user_participating})
        MERGE (mentioned)-[r:IS_RESPONSIBLE]->(p)
        MERGE (participant)-[r2:PARTICIPATES_IN]->(p)
        WITH p, r, r2
        MATCH (p)
        MATCH (d:Disease {name:$disease}) 
        MERGE (p)-[r3:STUDIES_DISEASE]->(d)
        WITH p, r, r2, r3
        MATCH (p)
        MATCH (t:Tissue {name:$tissue}) 
        MERGE (p)-[r4:STUDIES_TISSUE]->(t)
        WITH p, r, r2, r3, r4
        MATCH (p)
        MATCH (c:Clinical_variable {name:$intervention}) 
        MERGE (p)-[r5:STUDIES_INTERVENTION]->(c)
        RETURN COUNT(p) AS PROJECTID_project, COUNT(r) AS PROJECTID_responsibles, COUNT(r2) AS PROJECTID_participants, COUNT(r3) AS PROJECTID_studies_disease, COUNT(r4) AS PROJECTID_studies_tissue, COUNT(r5) AS PROJECTID_studies_intervention;
increment_subject_id:
    name: create new subject id
    description: 'Returns a new Subject identifier based on existing subjects in the database (sequential identifier).'
    involved_nodes:
        - Subject
    involved_rels:
    query: >
        MATCH (s:Subject)
        WITH max(toInteger(SPLIT(s.id, 'S')[1]))+1 as new_id
        RETURN SUBSTRING('S',0,1) + new_id AS result;
create_subjects:
    name: create subjects from file
    description: 'Creates Subject nodes and links them to Project nodes, directly from projectCreationApp (web app).'
    involved_nodes:
        - Project
        - Subject
    involved_rels:
    query: >
        CREATE CONSTRAINT ON (s:Subject) ASSERT s.id IS UNIQUE;
        MERGE (s:Subject {id:$subject_id})
        WITH s
        MATCH (p:Project {id:$external_id})
        MATCH (s) 
        MERGE (p)-[r:HAS_ENROLLED]->(s)
        RETURN s.id, COUNT(s) AS PROJECTID_subject, COUNT(r) AS PROJECTID_project_has_enrolled_subject;
create_timepoint:
    name: create timepoint from file
    description: 'Creates Timepoint nodes, directly from projectCreationApp (web app).'
    involved_nodes:
        - Timepoint
    involved_rels:
    query: >
        CREATE CONSTRAINT ON (t:Timepoint) ASSERT t.id IS UNIQUE;
        MERGE (t:Timepoint {id:$timepoint})
        ON CREATE SET t.units=$units
        RETURN COUNT(t) AS PROJECTID_timepoint;


